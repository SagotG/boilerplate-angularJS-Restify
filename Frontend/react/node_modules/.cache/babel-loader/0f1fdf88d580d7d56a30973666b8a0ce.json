{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport escapeHtml from 'escape-html';\nimport Element from './Element';\nimport StyleFilter from './StyleFilter';\nimport { FILTER_DENY, FILTER_CAST_NUMBER, FILTER_CAST_BOOL, FILTER_NO_CAST, TAGS, BANNED_TAG_LIST, ALLOWED_TAG_LIST, ATTRIBUTES, ATTRIBUTES_TO_PROPS } from './constants';\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar INVALID_ROOTS = /^<(!doctype|(html|head|body)(\\s|>))/i;\nvar ALLOWED_ATTRS = /^(aria\\x2D|data\\x2D|[0-9A-Z_a-z\\u017F\\u212A]+:)/i;\n\nvar Parser = function () {\n  function Parser(markup, props, matchers, filters) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (matchers === void 0) {\n      matchers = [];\n    }\n\n    if (filters === void 0) {\n      filters = [];\n    }\n\n    _defineProperty(this, \"allowed\", void 0);\n\n    _defineProperty(this, \"banned\", void 0);\n\n    _defineProperty(this, \"blocked\", void 0);\n\n    _defineProperty(this, \"doc\", void 0);\n\n    _defineProperty(this, \"content\", []);\n\n    _defineProperty(this, \"props\", void 0);\n\n    _defineProperty(this, \"matchers\", void 0);\n\n    _defineProperty(this, \"filters\", void 0);\n\n    _defineProperty(this, \"keyIndex\", void 0);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      if (markup && typeof markup !== 'string') {\n        throw new TypeError('Interweave parser requires a valid string.');\n      }\n    }\n\n    this.props = props;\n    this.matchers = matchers;\n    this.filters = [].concat(filters, [new StyleFilter()]);\n    this.keyIndex = -1;\n    this.doc = this.createDocument(markup || '');\n    this.allowed = new Set(props.allowList || ALLOWED_TAG_LIST);\n    this.banned = new Set(BANNED_TAG_LIST);\n    this.blocked = new Set(props.blockList);\n  }\n\n  var _proto = Parser.prototype;\n\n  _proto.applyAttributeFilters = function applyAttributeFilters(name, value) {\n    return this.filters.reduce(function (nextValue, filter) {\n      return nextValue !== null && typeof filter.attribute === 'function' ? filter.attribute(name, nextValue) : nextValue;\n    }, value);\n  };\n\n  _proto.applyNodeFilters = function applyNodeFilters(name, node) {\n    return this.filters.reduce(function (nextNode, filter) {\n      return nextNode !== null && typeof filter.node === 'function' ? filter.node(name, nextNode) : nextNode;\n    }, node);\n  };\n\n  _proto.applyMatchers = function applyMatchers(string, parentConfig) {\n    var _this = this;\n\n    var elements = [];\n    var props = this.props;\n    var matchedString = string;\n    var parts = null;\n    this.matchers.forEach(function (matcher) {\n      var tagName = matcher.asTag().toLowerCase();\n\n      var config = _this.getTagConfig(tagName);\n\n      if (props[matcher.inverseName] || !_this.isTagAllowed(tagName)) {\n        return;\n      }\n\n      if (!_this.canRenderChild(parentConfig, config)) {\n        return;\n      }\n\n      while (parts = matcher.match(matchedString)) {\n        var _ref = parts,\n            match = _ref.match,\n            partProps = _objectWithoutPropertiesLoose(_ref, [\"match\"]);\n\n        matchedString = matchedString.replace(match, \"#{{\" + elements.length + \"}}#\");\n        _this.keyIndex += 1;\n        var element = matcher.createElement(match, _extends({}, props, partProps, {\n          key: _this.keyIndex\n        }));\n\n        if (element) {\n          elements.push(element);\n        }\n      }\n    });\n\n    if (elements.length === 0) {\n      return matchedString;\n    }\n\n    var matchedArray = [];\n    var lastIndex = 0;\n\n    while (parts = matchedString.match(/#\\{\\{(\\d+)\\}\\}#/)) {\n      var _ref2 = parts,\n          no = _ref2[1];\n      var _ref3 = parts,\n          _ref3$index = _ref3.index,\n          index = _ref3$index === void 0 ? 0 : _ref3$index;\n\n      if (lastIndex !== index) {\n        matchedArray.push(matchedString.slice(lastIndex, index));\n      }\n\n      matchedArray.push(elements[parseInt(no, 10)]);\n      lastIndex = index + parts[0].length;\n      matchedString = matchedString.replace(\"#{{\" + no + \"}}#\", \"%{{\" + no + \"}}%\");\n    }\n\n    if (lastIndex < matchedString.length) {\n      matchedArray.push(matchedString.slice(lastIndex));\n    }\n\n    return matchedArray;\n  };\n\n  _proto.canRenderChild = function canRenderChild(parentConfig, childConfig) {\n    if (!parentConfig.tagName || !childConfig.tagName) {\n      return false;\n    }\n\n    if (parentConfig.void) {\n      return false;\n    }\n\n    if (parentConfig.children.length > 0) {\n      return parentConfig.children.includes(childConfig.tagName);\n    }\n\n    if (parentConfig.invalid.length > 0 && parentConfig.invalid.includes(childConfig.tagName)) {\n      return false;\n    }\n\n    if (childConfig.parent.length > 0) {\n      return childConfig.parent.includes(parentConfig.tagName);\n    }\n\n    if (!parentConfig.self && parentConfig.tagName === childConfig.tagName) {\n      return false;\n    }\n\n    return Boolean(parentConfig && parentConfig.content & childConfig.type);\n  };\n\n  _proto.convertLineBreaks = function convertLineBreaks(markup) {\n    var _this$props = this.props,\n        noHtml = _this$props.noHtml,\n        disableLineBreaks = _this$props.disableLineBreaks;\n\n    if (noHtml || disableLineBreaks || markup.match(/<((?:\\/[a-z ]+)|(?:[a-z ]+\\/))>/gi)) {\n      return markup;\n    }\n\n    var nextMarkup = markup.replace(/\\r\\n/g, '\\n');\n    nextMarkup = nextMarkup.replace(/\\n{3,}/g, '\\n\\n\\n');\n    nextMarkup = nextMarkup.replace(/\\n/g, '<br/>');\n    return nextMarkup;\n  };\n\n  _proto.createDocument = function createDocument(markup) {\n    var doc = document.implementation.createHTMLDocument('Interweave');\n\n    if (markup.match(INVALID_ROOTS)) {\n      if (\"production\" !== process.env.NODE_ENV) {\n        throw new Error('HTML documents as Interweave content are not supported.');\n      }\n    } else {\n      doc.body.innerHTML = this.convertLineBreaks(this.props.escapeHtml ? escapeHtml(markup) : markup);\n    }\n\n    return doc;\n  };\n\n  _proto.extractAttributes = function extractAttributes(node) {\n    var _this2 = this;\n\n    var allowAttributes = this.props.allowAttributes;\n    var attributes = {};\n    var count = 0;\n\n    if (node.nodeType !== ELEMENT_NODE || !node.attributes) {\n      return null;\n    }\n\n    Array.from(node.attributes).forEach(function (attr) {\n      var name = attr.name,\n          value = attr.value;\n      var newName = name.toLowerCase();\n      var filter = ATTRIBUTES[newName] || ATTRIBUTES[name];\n\n      if (!_this2.isSafe(node)) {\n        return;\n      }\n\n      if (!newName.match(ALLOWED_ATTRS)) {\n        if (!allowAttributes && (!filter || filter === FILTER_DENY) || newName.match(/^on/) || value.replace(/(\\s|\\0|&#x0(9|A|D);)/, '').match(/(javascript|vbscript|livescript|xss):/i)) {\n          return;\n        }\n      }\n\n      var newValue = newName === 'style' ? _this2.extractStyleAttribute(node) : value;\n\n      if (filter === FILTER_CAST_BOOL) {\n        newValue = true;\n      } else if (filter === FILTER_CAST_NUMBER) {\n        newValue = parseFloat(newValue);\n      } else if (filter !== FILTER_NO_CAST) {\n        newValue = String(newValue);\n      }\n\n      attributes[ATTRIBUTES_TO_PROPS[newName] || newName] = _this2.applyAttributeFilters(newName, newValue);\n      count += 1;\n    });\n\n    if (count === 0) {\n      return null;\n    }\n\n    return attributes;\n  };\n\n  _proto.extractStyleAttribute = function extractStyleAttribute(node) {\n    var styles = {};\n\n    var camelCase = function camelCase(match, letter) {\n      return letter.toUpperCase();\n    };\n\n    Array.from(node.style).forEach(function (key) {\n      var value = node.style[key];\n      styles[key.replace(/-([a-z])/g, camelCase)] = value;\n    });\n    return styles;\n  };\n\n  _proto.getTagConfig = function getTagConfig(tagName) {\n    var common = {\n      children: [],\n      content: 0,\n      invalid: [],\n      parent: [],\n      self: true,\n      tagName: '',\n      type: 0,\n      void: false\n    };\n\n    if (TAGS[tagName]) {\n      return _extends({}, common, TAGS[tagName], {\n        tagName: tagName\n      });\n    }\n\n    return common;\n  };\n\n  _proto.isSafe = function isSafe(node) {\n    if (typeof HTMLAnchorElement !== 'undefined' && node instanceof HTMLAnchorElement) {\n      var href = node.getAttribute('href');\n\n      if (href && href.charAt(0) === '#') {\n        return true;\n      }\n\n      var protocol = node.protocol.toLowerCase();\n      return protocol === ':' || protocol === 'http:' || protocol === 'https:' || protocol === 'mailto:';\n    }\n\n    return true;\n  };\n\n  _proto.isTagAllowed = function isTagAllowed(tagName) {\n    if (this.banned.has(tagName) || this.blocked.has(tagName)) {\n      return false;\n    }\n\n    return this.props.allowElements || this.allowed.has(tagName);\n  };\n\n  _proto.parse = function parse() {\n    return this.parseNode(this.doc.body, this.getTagConfig('body'));\n  };\n\n  _proto.parseNode = function parseNode(parentNode, parentConfig) {\n    var _this3 = this;\n\n    var _this$props2 = this.props,\n        noHtml = _this$props2.noHtml,\n        noHtmlExceptMatchers = _this$props2.noHtmlExceptMatchers,\n        allowElements = _this$props2.allowElements,\n        transform = _this$props2.transform;\n    var content = [];\n    var mergedText = '';\n    Array.from(parentNode.childNodes).forEach(function (node) {\n      if (node.nodeType === ELEMENT_NODE) {\n        var tagName = node.nodeName.toLowerCase();\n\n        var config = _this3.getTagConfig(tagName);\n\n        if (mergedText) {\n          content.push(mergedText);\n          mergedText = '';\n        }\n\n        var nextNode = _this3.applyNodeFilters(tagName, node);\n\n        if (!nextNode) {\n          return;\n        }\n\n        var children;\n\n        if (transform) {\n          _this3.keyIndex += 1;\n          var _key = _this3.keyIndex;\n          children = _this3.parseNode(nextNode, config);\n          var transformed = transform(nextNode, children, config);\n\n          if (transformed === null) {\n            return;\n          } else if (typeof transformed !== 'undefined') {\n            content.push(React.cloneElement(transformed, {\n              key: _key\n            }));\n            return;\n          }\n\n          _this3.keyIndex = _key - 1;\n        }\n\n        if (_this3.banned.has(tagName)) {\n          return;\n        }\n\n        if (!(noHtml || noHtmlExceptMatchers && tagName !== 'br') && _this3.isTagAllowed(tagName) && (allowElements || _this3.canRenderChild(parentConfig, config))) {\n          _this3.keyIndex += 1;\n\n          var attributes = _this3.extractAttributes(nextNode);\n\n          var elementProps = {\n            tagName: tagName\n          };\n\n          if (attributes) {\n            elementProps.attributes = attributes;\n          }\n\n          if (config.void) {\n            elementProps.selfClose = config.void;\n          }\n\n          content.push(React.createElement(Element, _extends({}, elementProps, {\n            key: _this3.keyIndex\n          }), children || _this3.parseNode(nextNode, config)));\n        } else {\n          content = content.concat(_this3.parseNode(nextNode, config.tagName ? config : parentConfig));\n        }\n      } else if (node.nodeType === TEXT_NODE) {\n        var text = noHtml && !noHtmlExceptMatchers ? node.textContent : _this3.applyMatchers(node.textContent || '', parentConfig);\n\n        if (Array.isArray(text)) {\n          content = content.concat(text);\n        } else {\n          mergedText += text;\n        }\n      }\n    });\n\n    if (mergedText) {\n      content.push(mergedText);\n    }\n\n    return content;\n  };\n\n  return Parser;\n}();\n\nexport { Parser as default };","map":null,"metadata":{},"sourceType":"module"}