{"ast":null,"code":"import _pt from \"prop-types\";\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport Parser from './Parser';\nimport Markup from './Markup';\n\nvar Interweave = function (_React$PureComponent) {\n  _inheritsLoose(Interweave, _React$PureComponent);\n\n  function Interweave() {\n    return _React$PureComponent.apply(this, arguments) || this;\n  }\n\n  var _proto = Interweave.prototype;\n\n  _proto.parseMarkup = function parseMarkup() {\n    var _this = this;\n\n    var _ref = this.props,\n        content = _ref.content,\n        disableFilters = _ref.disableFilters,\n        disableMatchers = _ref.disableMatchers,\n        emptyContent = _ref.emptyContent,\n        filters = _ref.filters,\n        matchers = _ref.matchers,\n        onAfterParse = _ref.onAfterParse,\n        onBeforeParse = _ref.onBeforeParse,\n        tagName = _ref.tagName,\n        props = _objectWithoutPropertiesLoose(_ref, [\"content\", \"disableFilters\", \"disableMatchers\", \"emptyContent\", \"filters\", \"matchers\", \"onAfterParse\", \"onBeforeParse\", \"tagName\"]);\n\n    var allMatchers = disableMatchers ? [] : matchers;\n    var allFilters = disableFilters ? [] : filters;\n    var beforeCallbacks = onBeforeParse ? [onBeforeParse] : [];\n    var afterCallbacks = onAfterParse ? [onAfterParse] : [];\n    allMatchers.forEach(function (matcher) {\n      if (matcher.onBeforeParse) {\n        beforeCallbacks.push(matcher.onBeforeParse.bind(matcher));\n      }\n\n      if (matcher.onAfterParse) {\n        afterCallbacks.push(matcher.onAfterParse.bind(matcher));\n      }\n    });\n    var markup = beforeCallbacks.reduce(function (string, callback) {\n      var nextString = callback(string, _this.props);\n\n      if (\"production\" !== process.env.NODE_ENV) {\n        if (typeof nextString !== 'string') {\n          throw new TypeError('Interweave `onBeforeParse` must return a valid HTML string.');\n        }\n      }\n\n      return nextString;\n    }, content || '');\n    var parser = new Parser(markup, props, allMatchers, allFilters);\n    var nodes = afterCallbacks.reduce(function (parserNodes, callback) {\n      var nextNodes = callback(parserNodes, _this.props);\n\n      if (\"production\" !== process.env.NODE_ENV) {\n        if (!Array.isArray(nextNodes)) {\n          throw new TypeError('Interweave `onAfterParse` must return an array of strings and React elements.');\n        }\n      }\n\n      return nextNodes;\n    }, parser.parse());\n\n    if (nodes.length === 0) {\n      return emptyContent;\n    }\n\n    return nodes;\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        emptyContent = _this$props.emptyContent,\n        tagName = _this$props.tagName;\n    return React.createElement(Markup, {\n      emptyContent: emptyContent,\n      tagName: tagName,\n      parsedContent: this.parseMarkup()\n    });\n  };\n\n  return Interweave;\n}(React.PureComponent);\n\n_defineProperty(Interweave, \"propTypes\", {\n  disableFilters: _pt.bool,\n  disableMatchers: _pt.bool,\n  filters: _pt.arrayOf(_pt.any),\n  matchers: _pt.arrayOf(_pt.any),\n  onAfterParse: _pt.oneOfType([_pt.any, _pt.oneOf([null])]),\n  onBeforeParse: _pt.oneOfType([_pt.any, _pt.oneOf([null])])\n});\n\n_defineProperty(Interweave, \"defaultProps\", {\n  content: '',\n  disableFilters: false,\n  disableMatchers: false,\n  emptyContent: null,\n  filters: [],\n  matchers: [],\n  onAfterParse: null,\n  onBeforeParse: null,\n  tagName: 'span'\n});\n\nexport { Interweave as default };","map":null,"metadata":{},"sourceType":"module"}