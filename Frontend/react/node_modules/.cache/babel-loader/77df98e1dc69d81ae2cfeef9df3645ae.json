{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\n\nvar Matcher = function () {\n  function Matcher(name, options, factory) {\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"propName\", void 0);\n\n    _defineProperty(this, \"inverseName\", void 0);\n\n    _defineProperty(this, \"factory\", void 0);\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      if (!name || name.toLowerCase() === 'html') {\n        throw new Error(\"The matcher name \\\"\" + name + \"\\\" is not allowed.\");\n      }\n    }\n\n    this.options = _extends({}, options);\n    this.propName = name;\n    this.inverseName = \"no\" + (name.charAt(0).toUpperCase() + name.slice(1));\n    this.factory = factory || null;\n  }\n\n  var _proto = Matcher.prototype;\n\n  _proto.createElement = function createElement(match, props) {\n    var element = null;\n\n    if (this.factory) {\n      element = React.createElement(this.factory, props, match);\n    } else {\n      element = this.replaceWith(match, props);\n    }\n\n    if (\"production\" !== process.env.NODE_ENV) {\n      if (typeof element !== 'string' && !React.isValidElement(element)) {\n        throw new Error(\"Invalid React element created from \" + this.constructor.name + \".\");\n      }\n    }\n\n    return element;\n  };\n\n  _proto.doMatch = function doMatch(string, pattern, callback) {\n    var matches = string.match(pattern instanceof RegExp ? pattern : new RegExp(pattern, 'i'));\n\n    if (!matches) {\n      return null;\n    }\n\n    return _extends({}, callback(matches), {\n      match: matches[0]\n    });\n  };\n\n  _proto.onBeforeParse = function onBeforeParse(content, props) {\n    return content;\n  };\n\n  _proto.onAfterParse = function onAfterParse(content, props) {\n    return content;\n  };\n\n  return Matcher;\n}();\n\nexport { Matcher as default };","map":null,"metadata":{},"sourceType":"module"}